#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle shared/.config/emacs/init.el

* Initial Setup
** Handle GC and startup

Increase garbage collection threshold so we can't start faster without GC'ing
and display the startup time for emacs

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-

  (setq gc-cons-threshold 100000000
        read-process-output-max (* 1024 1024)
        load-prefer-newer t
        user-full-name "Daniel Figueroa"
        use-short-answers t)
  (defun display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
        	     (float-time
        	      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'display-startup-time)

#+end_src

** Package System Setup

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (setq use-package-always-ensure t)

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "11:59"))

  (use-package no-littering)
  (setq custom-file (expand-file-name "custom.el" "~/.config/emacs/"))
  (load custom-file)
  ;; Make sure we load files
  (let ((default-directory "~/.config/emacs/elpa/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

* Interface

** Initial configs
Remove stuff like tool-bars and menus. Also set up some of the built in
properties.

#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (transient-mark-mode t)
    (show-paren-mode 1)
    (window-divider-mode)
    (column-number-mode t)
    (size-indication-mode t)
    (blink-cursor-mode -1)
    (global-display-line-numbers-mode t)
    (recentf-mode 1)
    (savehist-mode 1)
    (save-place-mode 1)
    (global-auto-revert-mode 1)
    (line-number-mode t)
    (repeat-mode)
    (winner-mode)

    (setq next-line-add-newlines t
          history-length 25
          global-auto-revert-non-file-buffers 1
          use-dialog-box nil
          kill-whole-line t
          next-screen-context-lines 10
          kill-do-not-save-duplicates t
          cursor-type 'box
          use-package-enable-imenu-support t
          mark-ring-max 30
          set-mark-command-repeat-pop t
          initial-buffer-choice 'remember-notes
          tab-bar-mode 1)

    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    treemacs-mode-hook
                    eshell-mode-hook
                    markdown-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode -1))))

    (setq initial-scratch-message (concat
                                   ";;; Emacs started: "
                                   (format-time-string "%Y-%m-%d - %H:%m")
                                   "\n;;; Happy Hacking!\n"))

    (setq ring-bell-function 'ignore
          x-select-enable-clipboard t
          inhibit-startup-screen t
          confirm-kill-emacs 'y-or-n-p
          dired-dwim-target t
          delete-by-moving-to-thrash t
          global-auto-revert-non-file-buffers t
          auto-save-file-name-transforms '((".*" "~/.emacs_autosave/" t))
          backup-directory-alist '(("." . "~/.emacs_backups"))
          proced-enable-color-flag t
          create-lockfiles nil)

    (make-directory "~/.emacs_backups/" t)
    (make-directory "~/.emacs_autosave/" t)

    ;; Disable warnings for native comp
    (setq native-comp-async-report-warnings-errors nil)

    ;;Enable Hippie Expand
    (global-set-key [remap dabbrev-expand] 'hippie-expand)

    (put 'narrow-to-region 'disabled nil)
#+end_src


*** Custom keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-unset-key (kbd "C-z"))
#+end_src

*** Rebind close shortcut if running as a daemon
#+begin_src emacs-lisp
  (defun close-frame-p ()
    (interactive)
    (if (yes-or-no-p "Close Frame?") 
        (delete-frame)))
  (if (daemonp)
      (global-set-key (kbd "C-x C-c") 'close-frame-p))
#+end_src

*** Scrolling
#+begin_src emacs-lisp
  (setq scroll-step 1
        scroll-conservatively 10000
        auto-window-vscroll nil)
#+end_src

** Dired and file browsing
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh"
        dired-kill-when-opening-new-dired-buffer t)

  (use-package dired-open
    :config
    (setq dired-open-extensions '(("mp4" . "vlc"))))
#+end_src

** Remember
Using the classic remember package I can store quick notes in the remember buffer and then refile them using org-mode.

#+begin_src emacs-lisp
      (use-package remember
        :config
        (setq remember-data-directory "~/.config/emacs/var/remember/notes"
              remember-notes-initial-major-mode 'org-mode
              remember-time-format "%Y-%m-%d %H:%M"
              remember-annotation "")
        :bind (("C-x M-r" . remember)
               ("C-x M-R" . remember-clipboard)))
      
      (add-hook 'after-make-frame-functions
              (lambda (f) (with-selected-frame f (remember-notes t))))      
#+end_src

** Theeming
*** Modus Theme
#+begin_src emacs-lisp

  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  ;; (use-package modus-themes
  ;;   :init
  ;;   (setq modus-themes-region '(accented)
  ;;         modus-themes-mode-line '(accented borderless)
  ;;         modus-themes-org-blocks 'tinted-background
  ;;         modus-themes-paren-match '(bold intense)
  ;;         modus-themes-prompts '(light)
  ;;         modus-themes-syntax '(faint)
  ;;         modus-themes-mixed-fonts t
  ;;         modus-themes-custom-auto-reload t
  ;;         modus-themes-completions
  ;;         '((matches . (extrabold))
  ;;           (selection . (italic)))
  ;;         modus-themes-headings
  ;;         '((1 . (rainbow overline background 1.4))
  ;;           (2 . (rainbow background 1.3))
  ;;           (3 . (rainbow bold 1.2))
  ;;           (t . (semilight 1.1)))
  ;;         modus-themes-common-palette-overrides
  ;;         '((border-mode-line-active bg-mode-line-active)
  ;;           (border-mode-line-inactive bg-mode-line-inactive)
  ;;           (modus-themes-preset-overrides-faint))
  ;;         modus-themes-scale-headings t
  ;;         modus-themes-mode-line '(borderless accented)))

  ;; (defun my-modus-themes-custom-faces (&rest _)
  ;;   (modus-themes-with-colors
  ;;     (custom-set-faces
  ;;      ;; Add "padding" to the mode lines
  ;;      `(mode-line ((,c :underline ,border-mode-line-active
  ;;                       :overline ,border-mode-line-active
  ;;                       :box (:line-width 5 :color ,bg-mode-line-active))))
  ;;      `(mode-line-inactive ((,c :underline ,border-mode-line-inactive
  ;;                                :overline ,border-mode-line-inactive
  ;;                                :box (:line-width 5 :color ,bg-mode-line-inactive)))))))

  ;; ;; ESSENTIAL to make the underline move to the bottom of the box:
  ;; (setq x-underline-at-descent-line t)
  ;; (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)

  ;; (load-theme 'modus-vivendi-tinted t)
  (use-package ef-themes)
  (load-theme 'ef-dark)
#+end_src

*** Spacious padding
Add padding around emacs windows
#+begin_src emacs-lisp
  (use-package spacious-padding
    :config
    (setq spacious-padding-subtle-mode-line
          `(:mode-line-active 'default
            :mode-line-inactive vertical-border))
    :init
    (spacious-padding-mode))
#+end_src

*** Rainbow delimiters
Doesn't work that well with advanced regexes.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+end_src


*** Font configuration
Set the font and enable font ligatures.
**** Specify Fonts
#+begin_src emacs-lisp
  (use-package fontaine
    :config
    (setq fontaine-presets
          '((tight
             :default-family "JetBrains Mono"
             :default-height 100
             :fixed-pitch-family "JetBrains Mono"
             :variable-pitch-family "Iosevka"
             :italic-family "JetBrains Mono"
             :line-spacing 1)
            (regular
             :default-family "JetBrains Mono"
             :default-height 110
             :fixed-pitch-family "JetBrains Mono"
             :variable-pitch-family "Iosevka"
             :italic-family "JetBrains Mono"
             :line-spacing 1)
            (large
             :default-family "JetBrains Mono"
             :default-height 140
             :fixed-pitch-family "JetBrains Mono"
             :variable-pitch-family "Iosevka"
             :italic-family "JetBrains Mono"
             :line-spacing 1)
            (huge
             :default-family "JetBrains Mono"
             :default-height 260
             :fixed-pitch-family "JetBrains Mono"
             :variable-pitch-family "Iosevka"
             :italic-family "JetBrains Mono"
             :line-spacing 1)
            (work-from-home
             :default-family "JetBrains Mono"
             :default-height 80
             :fixed-pitch-family "JetBrains Mono"
             :variable-pitch-family "Iosevka"
             :italic-family "JetBrains Mono"
             :line-spacing 1))))

  (cond ((equal (system-name) "endive") (fontaine-set-preset 'large))
        ((equal (system-name) "archie") (fontaine-set-preset 'regular))
        ((equal (system-name) "slartibartfast") (fontaine-set-preset 'large))
        ((equal "" "") (fontaine-set-preset 'regular)))

#+end_src
***** Ligature Mode
Doesn't work with Hack Nerd Font.
#+begin_src emacs-lisp  
 (use-package ligature
   :config
   ;; Enable the "www" ligature in every possible major mode
   (ligature-set-ligatures 't '("www"))
   ;; Enable traditional ligature support in eww-mode, if the
   ;; `variable-pitch' face supports it
   (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
   ;; Enable all Cascadia and Fira Code ligatures in programming modes
   (ligature-set-ligatures 'prog-mode
                           '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                             ;; =:= =!=
                             ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                             ;; ;; ;;;
                             (";" (rx (+ ";")))
                             ;; && &&&
                             ("&" (rx (+ "&")))
                             ;; !! !!! !. !: !!. != !== !~
                             ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                             ;; ?? ??? ?:  ?=  ?.
                             ("?" (rx (or ":" "=" "\." (+ "?"))))
                             ;; %% %%%
                             ("%" (rx (+ "%")))
                             ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                             ;; |->>-||-<<-| |- |== ||=||
                             ;; |==>>==<<==<=>==//==/=!==:===>
                             ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                             "-" "=" ))))
                             ;; \\ \\\ \/
                             ("\\" (rx (or "/" (+ "\\"))))
                             ;; ++ +++ ++++ +>
                             ("+" (rx (or ">" (+ "+"))))
                             ;; :: ::: :::: :> :< := :// ::=
                             (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                             ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                             ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                             "="))))
                             ;; .. ... .... .= .- .? ..= ..<
                             ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                             ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                             ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                             ;; *> */ *)  ** *** ****
                             ("*" (rx (or ">" "/" ")" (+ "*"))))
                             ;; www wwww
                             ("w" (rx (+ "w")))
                             ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                             ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                             ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                             ;; << <<< <<<<
                             ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                             "-"  "/" "|" "="))))
                             ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                             ;; >> >>> >>>>
                             (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                             ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                             ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                          (+ "#"))))
                             ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                             ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                             ;; __ ___ ____ _|_ __|____|_
                             ("_" (rx (+ (or "_" "|"))))
                             ;; Fira code: 0xFF 0x12
                             ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                             ;; Fira code:
                             "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                             ;; The few not covered by the regexps.
                             "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
   ;; Enables ligature checks globally in all buffers. You can also do it
   ;; per mode with `ligature-mode'.
   (global-ligature-mode t))
#+end_src 

*** Page Breaks
Display page breaks as lines instead of ^L
#+begin_src emacs-lisp
  (use-package page-break-lines
    :init
    (global-page-break-lines-mode))
#+end_src

** Cursor, Editing  and Window movement
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c a" . mc/mark-all-like-this)))

  (use-package windmove
    :config
    (windmove-default-keybindings 'ctrl))

  (use-package ace-window
    :bind
    (("M-o" . ace-window)))


  ;; Make it so keyboard-escape-quit doesn't delete-other-windows
  (require 'cl-lib)
  (defadvice keyboard-escape-quit
      (around keyboard-escape-quit-dont-delete-other-windows activate)
    (cl-letf (((symbol-function 'delete-other-windows)
               (lambda () nil)))
      ad-do-it))

  (use-package pulsar
    :config
    (pulsar-global-mode))

  (use-package ace-jump-mode
    :bind (("C-c SPC" . ace-jump-mode)))

#+end_src

** Moving Text like in other editors
#+begin_src emacs-lisp
  (use-package move-text
    :bind (("M-<up>" . move-text-up)
           ("M-<down>" . move-text-down)))
#+end_src
e
** Treemacs
A sidebar for navigating the file tree, gives a more IDE-like feeling.
#+begin_src emacs-lisp
  (use-package treemacs
    :bind
    (("C-c t" . treemacs))
    :config
    (setq treemacs-user-mode-line-format 'none))
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
  (use-package treemacs-magit
    :after (treemacs magit))

  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
#+end_src

** Transient Windows
Transient is for showing buffers that allow you to create more complex commands and visualize them.
#+begin_src emacs-lisp
  (use-package transient)
  (transient-define-prefix transient-scale-text ()
    "Scale Text in or out"
    ["Actions"
     ("j" "Increase scale" text-scale-increase :transient t)
     ("k" "Decrease scale" text-scale-decrease :transient t)])

  (global-set-key (kbd "<f2>") 'transient-scale-text)

#+end_src

** Perspective
Create different perspectives or work areas.
#+begin_src emacs-lisp
  (use-package perspective
    :bind
    (("C-x C-b" . persp-ibuffer)
     ("C-x b"   . persp-switch-to-buffer*)
     ("C-x k"   . persp-kill-buffer*))
    :custom
    (persp-mode-prefix-key (kbd "C-x x"))
    :init
    (persp-mode))

#+end_src

** Helper Packages
*** Diminish
Hides minor modes in the modeline or shows them in a shortened format
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
*** hl-line
Highlight the current line...
#+begin_src emacs-lisp
  (use-package hl-line
    :config (global-hl-line-mode))
#+end_src
*** command-log-mode
Show the executed emacs commands in a separate buffer
#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

*** Which Key
which-key is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command(a prefix) in a popup.  For example,
after enabling the minor mode if you enter C-x and wait for the default of 1
second the minibuffer will expand with all of the available key bindings that
follow C-x (or as many as space allows given your settings).  This includes
prefixes like C-x 8 which are shown in a different face.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))  
#+end_src

*** Undo Tree
Visualize the emacs undo tree and navigate through it.
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config 
    (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo"))))
#+end_src

** Vertico, Consult, Orderless, Marginalia and Corfu
This is the new cool way that emacs users use emacs.
Enjoy!
*** Vertico
Vertico provides a performant and minimalistic vertical completion UI based on
the default completion system.
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :config
    (setq vertico-resize -1)
    (setq vertico-count 15)
    (setq vertico-cycle t))
#+end_src
*** Consult
Consult provides search and navigation commands based on the Emacs completion
function completing-read.  Completion allows you to quickly select an item from
a list of candidates.
#+begin_src emacs-lisp
  (use-package consult
    :bind
    (("C-s"     . consult-line)
     ("C-x b"   . consult-buffer)
     ("C-x r m" . consult-bookmark)
     ("C-y"     . consult-yank-pop))
    :config
    (setq consult-fontify-max-size 1024))

  (use-package consult-project-extra
    :bind
    (("C-x p f" . consult-project-extra-find)))

  (use-package consult-flycheck)
  (use-package consult-eglot)
#+end_src
*** Orderless
Show completions in a specified configureable order
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless flex)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Marginalia
Annotate the minibuffer, for example when calling M-x or C-x f
#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

*** Corfu
Corfu enhances in-buffer completion with a small completion popup.
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match t)        ;; Never quit, even if there is no match
    (corfu-preview-current t)      ;; Enable current candidate preview
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 5)        ;; Use scroll margin
    (corfu-min-width 80)
    (corfu-echo-documentation t)
    (corfu-preselect-first t)
    (corfu-popupinfo-direction 'right)
    (corfu-popupinfo-delay 0.3)
    :hook ((prog-mode . corfu-mode))
    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode))

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
    (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
    (kind-icon-blend-frac 0.08)

    ;; NOTE 2022-02-05: `kind-icon' depends `svg-lib' which creates a cache
    ;; directory that defaults to the `user-emacs-directory'. Here, I change that
    ;; directory to a location appropriate to `no-littering' conventions, a
    ;; package which moves directories of other packages to sane locations.
    (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/")) ; Change cache dir
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'
  )

#+end_src

** Embark
Embark makes it easy to choose a command to run based on what is near point,
both during a minibuffer completion session and in normal buffers.
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim))
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src


* Tools
** Proced
#+begin_src emacs-lisp
  (use-package proced)
#+end_src

* Social
** Mastodon
#+begin_src emacs-lisp  
  (use-package mastodon
    :config
    (setq mastodon-instance-url "https://genserver.social")
    (setq mastodon-active-user "entilldaniel"))

#+end_src   

* Markdown Mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook
    (markdown-mode . nb/markdown-unhighlight)
    :config
    (defvar nb/current-line '(0 . 0)
      "(start . end) of current line in current buffer")
    (make-variable-buffer-local 'nb/current-line)

    (defun nb/unhide-current-line (limit)
      "Font-lock function"
      (let ((start (max (point) (car nb/current-line)))
            (end (min limit (cdr nb/current-line))))
        (when (< start end)
          (remove-text-properties start end
                                  '(invisible t display "" composition ""))
          (goto-char limit)
          t)))

    (defun nb/refontify-on-linemove ()
      "Post-command-hook"
      (let* ((start (line-beginning-position))
             (end (line-beginning-position 2))
             (needs-update (not (equal start (car nb/current-line)))))
        (setq nb/current-line (cons start end))
        (when needs-update
          (font-lock-fontify-block 3))))

    (defun nb/markdown-unhighlight ()
      "Enable markdown concealling"
      (interactive)
      (markdown-toggle-markup-hiding 'toggle)
      (font-lock-add-keywords nil '((nb/unhide-current-line)) t)
      (add-hook 'post-command-hook #'nb/refontify-on-linemove nil t))
    :custom-face
    (markdown-header-delimiter-face ((t (:foreground "#616161" :height 0.9))))
    (markdown-header-face-1 ((t (:height 1.2  :foreground "#A3BE8C" :weight extra-bold :inherit markdown-header-face))))
    (markdown-header-face-2 ((t (:height 1.15  :foreground "#EBCB8B" :weight extra-bold :inherit markdown-header-face))))
    (markdown-header-face-3 ((t (:height 1.1  :foreground "#D08770" :weight extra-bold :inherit markdown-header-face))))
    (markdown-header-face-4 ((t (:height 1.1 :foreground "#BF616A" :weight bold :inherit markdown-header-face))))
    (markdown-header-face-5 ((t (:height 1.1  :foreground "#b48ead" :weight bold :inherit markdown-header-face))))
    (markdown-header-face-6 ((t (:height 1.05 :foreground "#5e81ac" :weight semi-bold :inherit markdown-header-face))))
    :hook
    (markdown-mode . abbrev-mode))
#+end_src

* Org Mode
** Basic org config
#+begin_src emacs-lisp
  (defun org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode)
    (visual-line-mode))


  (defun org-font-setup ()
    ;; replace list hyphen with dot"
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\)"
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 140
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))

#+end_src

** Org Journal and Agenda

#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j ")
    :config
    (setq org-journal-dir "~/Documents/org/journal/"
          org-journal-date-format "%A, %d %B %Y"))

  (setq calendar-week-start-day 1)
  (setq org-agenda-files (list "~/Documents/org/todo.org"
                               "~/Documents/org/inbox.org"
                               "~/Documents/org/work.org"
                               "~/Documents/org/ideas.org"
                               "~/Documents/org/archive.org"))

  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-outline-path-complete-in-steps nil)  ;; Refile in a single go
  (setq org-refile-use-outline-path t)           ;; Show full paths for refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers) 
#+end_src

** Org Capture Templates
#+begin_src emacs-lisp

  (defun df/project-notes-path ()
    "uses project.el project name to get the current path of the project"
    (let ((path (concat (project-root (project-current)) ".notes.org")))
      (find-file path)
      (unless (org-find-exact-headline-in-buffer "Notes")
        (org-insert-heading nil nil t)
        (insert "Notes"))))

  (setq org-capture-templates
        '(("t" "TODO" entry (file+headline "~/Documents/org/todo.org" "Tasks")
           "* TODO %?\n %i\n")
          ("b" "INBOX" entry (file+headline "~/Documents/org/inbox.org" "Tasks")
           "**  %?\n %i\n")
          ("i" "IDEA" entry (file+headline "~/Documents/org/ideas.org" "Ideas")
           "** %?\n %i\n")
          ("n" "NOTE" entry (file+headline "~/Documents/org/ideas.org" "Notes")
           "** %?\n %i\n")
          ("p" "Project Note" entry (function df/project-notes-path)
           "** %?\n %i\n")
          ("j" "Training Journal Entry" entry
           (file+headline "~/Documents/org/training.org" "Training Journal")
           "* %<%Y-%m-%d> Training Session\n:PROPERTIES:\n:Effort: %^{Effort (1-10)|10}\n:END:\n\n** What I Did\n%?\n\n** Weights Used\n- \n\n** Notes\n- ")
          ("o" "OBSIDIAN ENTRY" entry (file+headline "~/Documents/org/obsidian.org" "Obisidan Entries")
           "** %?\n %i\n")))

  (add-hook 'org-capture-mode-hook 'delete-other-windows)
  (global-set-key (kbd "C-c c") 'org-capture)

#+end_src
** Org Present
#+begin_src emacs-lisp

  (defun myfuns/start-presentation ()
    (interactive)
    (org-present-big)
    (org-display-inline-images)
    (org-present-hide-cursor)
    (org-present-read-only))

  (defun myfuns/end-presentation ()
    (interactive)
    (org-present-small)
    (org-remove-inline-images)
    (org-present-show-cursor)
    (org-present-read-write))

  (use-package org-present)
  (add-hook 'org-present-mode-hook 'myfuns/start-presentation)
  (add-hook 'org-present-mode-quit-hook 'myfuns/end-presentation)
#+end_src
** Structure Templates
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("b"   . "src bash"))
  (add-to-list 'org-structure-template-alist '("py"  . "src python"))
  (add-to-list 'org-structure-template-alist '("exs" . "src elixir"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
#+end_src

** Babel Configuration
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (elixir . t)
     (python . t)
     (sql . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** Write emacs configuration everytime we save.
#+begin_src emacs-lisp
  (defun org-babel-tangle-config ()
    (when (eq (string-match "/home/.*/.dotfiles/.*.org" (buffer-file-name)) 0)
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

* Terminal Configuration
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-arguments '("-l" "-i"))
    (when (daemonp)
      (exec-path-from-shell-initialize)))

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 5000))
#+end_src

* Development
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Eglot
Eglot is the built in lsp client in emacs.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :defer t
    :bind (("C-x |" . eglot-code-actions))
    :hook ((elixir-mode . eglot-ensure)
           (rust-mode . eglot-ensure)
           (tsx-ts-mode . eglot-ensure)
           (js-ts-mode . eglot-ensure)
           (typescript-ts-mode . eglot-ensure)
           (bash-ts-mode . eglot-ensure)
           (markdown-ts-mode . eglot-ensure)
           (go-ts-mode . eglot-ensure)
           (html-mode . eglot-ensure)
           (java-ts-mode . eglot-ensure))
    :config
    (add-to-list
     'eglot-server-programs '(elixir-ts-mode "elixir-ls"))
    (add-to-list
     'eglot-server-programs '((typescript-ts-mode) "typescript-language-server" "--stdio"))
    (add-to-list
     'eglot-server-programs '((tsx-ts-mode) "typescript-language-server" "--stdio"))
    (add-to-list
     'eglot-server-programs '((js-ts-mode) "typescript-language-server" "--stdio"))
     (add-to-list
      'eglot-server-programs '((html-mode) "vscode-html-language-server" "--stdio"))
     (add-to-list
      'eglot-server-programs '((css-mode) "vscode-css-language-server"))
     (add-to-list
        'eglot-server-programs '((json-ts-mode) "vscode-json-language-server"))
     (add-to-list
        'eglot-server-programs '((python-ts-mode) "pylsp"))
     (add-to-list
          'eglot-server-programs '((java-ts-mode) "~/.local/bin/jdtls/bin/jdtls"))
    (setq eglot-autoshutdown 1))

  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))
#+end_src

*** Eldoc workaround for non-clickable links
There's an issue when looking at documentation for elixir in eldoc, since the documentation is in markdown and markdown-mode and eldoc-mode
apparently 
#+begin_src emacs-lisp
  (defun eglot-open-link ()
    (interactive)
    (if-let* ((url (get-text-property (point) 'help-echo)))
        (browse-url url)
      (user-error "No URL at point")))

  (define-advice eldoc-display-in-buffer (:after (&rest _) update-keymap)
    (with-current-buffer eldoc--doc-buffer
      (keymap-local-set "RET" #'eglot-open-link)))

#+end_src


** Tools
#+begin_src emacs-lisp
  (use-package restclient)

  (use-package yasnippet
    :init
    (yas-global-mode 1)
    :config
    (setq yas-snippet-dirs '("~/.config/emacs/snippets")))

  (use-package flycheck
    :hook (after-init . global-flycheck-mode)
    :config
    (flymake-mode nil)
    (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t)))

  (use-package docker)

  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src
** Code
#+begin_src emacs-lisp
  ;; (setq indent-line-function 'insert-tab)
  (setq-default tab-width 4)
  (custom-set-variables
   '(tab-stop-list '(4 8 12)))

#+end_src
*** Treesitter
#+begin_src emacs-lisp
    (setq treesit-language-source-alist
          '((heex       "https://github.com/phoenixframework/tree-sitter-heex")
            (elixir     "https://github.com/elixir-lang/tree-sitter-elixir")
            (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
            (tsx        "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json       "https://github.com/tree-sitter/tree-sitter-json")
            (css        "https://github.com/tree-sitter/tree-sitter-css")
            (elisp      "https://github.com/Wilfred/tree-sitter-elisp")
            (go         "https://github.com/tree-sitter/tree-sitter-go")
            (gomod      "https://github.com/camdencheek/tree-sitter-go-mod")
            (python     "https://github.com/tree-sitter/tree-sitter-python")
            (toml       "https://github.com/tree-sitter/tree-sitter-toml")
            (bash       "https://github.com/tree-sitter/tree-sitter-bash")
            (markdown   "https://github.com/ikatyang/tree-sitter-markdown")
            (java       "https://github.com/tree-sitter/tree-sitter-java")
            (yaml       "https://github.com/ikatyang/tree-sitter-yaml")))

    (setq major-mode-remap-alist
          '((elixir-mode . elixir-ts-mode)
            (rust-mode . rust-ts-mode)
            (js-mode . js-ts-mode)
            (js-json-mode . json-ts-mode)
            (go-mode . go-ts-mode)
            (python-mode . python-ts-mode)
            (java-mode . java-ts-mode)))
#+end_src

#+RESULTS:
: ((elixir-mode . elixir-ts-mode) (rust-mode . rust-ts-mode) (js-mode . js-ts-mode) (js-json-mode . json-ts-mode) (go-mode . go-ts-mode) (python-mode . python-ts-mode))

** Languages
*** HTML and other Markup languages

#+begin_src emacs-lisp
  (use-package emmet-mode)

  (use-package yaml-mode)
  (use-package toml-mode)
  (use-package markdown-mode)
#+end_src
*** Rust
#+begin_src emacs-lisp
  ;; (use-package rust-mode
  ;;   :init
  ;;   (setq rust-mode-treesitter-derive t))

  ;;   (use-package cargo
  ;;     :hook (rust-mode . cargo-minor-mode))
#+end_src
*** Docker
#+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("/Dockerfile\\'" . dockerfile-ts-mode))
#+end_src
*** Elixir
#+begin_src emacs-lisp

  (use-package mix)
  (use-package ob-elixir)
  (use-package elixir-ts-mode
    :hook (elixir-ts-mode . eglot-ensure)
    (elixir-ts-mode . mix-minor-mode)
    (elixir-ts-mode
     .
     (lambda ()
       (push '(">=" . ?\u2265) prettify-symbols-alist)
       (push '("<=" . ?\u2264) prettify-symbols-alist)
       (push '("!=" . ?\u2260) prettify-symbols-alist)
       (push '("==" . ?\u2A75) prettify-symbols-alist)
       (push '("=~" . ?\u2245) prettify-symbols-alist)
       (push '("<-" . ?\u2190) prettify-symbols-alist)
       (push '("->" . ?\u2192) prettify-symbols-alist)
       (push '("<-" . ?\u2190) prettify-symbols-alist)
       (push '("|>" . ?\u25B7) prettify-symbols-alist)))
       (before-save . eglot-format))

  (use-package exunit
    :diminish t
    :bind
    ("C-c e ." . exunit-verify-single)
    ("C-c e b" . exunit-verify)
    ("C-c e u a" . exunit-verify-all-in-umbrella)
    ("C-c e a" . exunit-verify-all)
    ("C-c e l" . exunit-rerun))


;;  (use-package flycheck-elixir
;;    :hook elixir-ts-mode)
#+end_src
*** Lisps
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (lisp-mode . paredit-mode)
           (clojure-mode . paredit-mode)
           (eval-expression-minibuffer . paredit-mode)))

#+end_src

*** Java

Happily using eglot-java which seems to be dead for now.
https://github.com/yveszoundi/eglot-java.




#+begin_src emacs-lisp
  ;; (use-package eglot-java)
  ;; (add-hook 'java-ts-mode-hook 'eglot-java-mode)
  ;; (with-eval-after-load 'eglot-java
  ;;   (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
  ;;   (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
  ;;   (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
  ;;   (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
  ;;   (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
  ;;   (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh))

#+end_src
*** Clojure
On ice for now.
*** Guile
#+begin_src emacs-lisp
  (use-package geiser)
  (use-package ac-geiser
    :hook
    (geiser-repl-mode-hook . ac-geiser-setup)
    (geiser-mode-hook . ac-geiser-setup)
    :config
    (add-to-list 'ac-modes 'geiser-repl-mode))
#+end_src

*** Python
#+begin_src emacs-lisp
  (use-package elpy
    :init
    (elpy-enable)
    :config
    (setq elpy-rpc-virtualenv-path "~/.config/emacs/pyenv"))

  (use-package python-mode)
#+end_src

*** JavaScript and TypeScript
#+begin_src emacs-lisp
  (setq js-indent-level 2)
  
  (use-package apheleia
    :config
    (apheleia-global-mode 1))

  ;; (use-package flymake-eslint
  ;;   :config
  ;;   (setq flymake-eslint-prefer-json-diagnostics t))
  ;; (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
#+end_src

*** Go language settings.
#+begin_src emacs-lisp
  (require 'project)

  (defun project-find-go-module (dir)
    (when-let ((root (locate-dominating-file dir "go.mod")))
      (cons 'go-module root)))

  (cl-defmethod project-root ((project (head go-module)))
    (cdr project))

  (add-hook 'project-find-functions #'project-find-go-module)

  (defun eglot-format-buffer-before-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

  (add-hook 'go-mode-hook #'eglot-format-buffer-before-save)
#+end_src

* Custom functions
#+begin_src emacs-lisp
  (defun epoch-to-string (epoch)
    (interactive "insert epoch")
    (message (format-time-string
              "%Y-%m-%d %H:%M:%S"
              (seconds-to-time (string-to-number
                                (buffer-substring-no-properties (region-beginning) (region-end))
                                )))))

  (defun insert-current-date ()
    (interactive)
    (insert
     (format-time-string "%Y-%m-%d")))

  (defun list-all-fonts ()
    (interactive)
    (get-buffer-create "fonts")
    (switch-to-buffer "fonts")
    (dolist (font (x-list-fonts "*"))
      (insert (format "%s\n" font)))
    (beginning-of-buffer))

  (defun df/copy-buffer-path-to-kill-ring ()
    "Copy the file path of a buffer to the clipboard"
    (interactive)
    (kill-new (buffer-file-name)))

#+end_src

** Personal Modes
#+begin_src emacs-lisp
  (load-file "~/.config/emacs/custom/emafig/emafig.el")
  (defun use-remote-emafig ()
    "configure emacs to use remote emafig"
    (interactive)
    (setq emafig-token
          "HHHSribvaTZv8X8Uaua7JggWbUf1SyUyhzLAevQsEfO9xBJ0")
    (setq emafig-host
          "https://figueroa.se"))

  (defun use-local-emafig ()
    "configure emafig for local development"
    (interactive)
    (setq emafig-token
          "hltc8L1x6NCusoHqkUJUmmhdHbN8Hwfkzu5XRTKWiEqQym5n")
    (setq emafig-host
          "http://localhost:4000"))

  ;; Set default to remote
  (use-remote-emafig)



  ;; Gemini API Key AIzaSyCz81mr3cf5rvMYMcXlo1eWnHoIa3U9B-Q

  (defun figge/my-joiner (joiner-delimiter joiner-start joiner-end)
    (interactive "sDelimiter: \nsStart: \nsEnd")
    ;;  (copy-region-as-kill (region-beginning) (region-end))
    (kill-region (region-beginning) (region-end))
    (let ((my-current-buffer (current-buffer)))
  	(with-current-buffer (get-buffer-create "*temp-line-joiner*")
  	  (yank)
  	  (switch-to-buffer (current-buffer))
  	  (goto-char (point-min))
  	  (while (not (eobp))
  		(goto-char (pos-eol))
  		(if (not (eq (pos-eol) (point-max)))
  			(insert joiner-delimiter))
  		(forward-line 1)
  		(delete-backward-char 1))
  	  (goto-char (pos-bol))
  	  (insert joiner-start)
  	  (goto-char (pos-eol))
  	  (insert joiner-end)
  	  (mark-whole-buffer)
  	  (copy-region-as-kill (region-beginning) (region-end))
  	  (kill-buffer)
  	  (yank))))

#+end_src

